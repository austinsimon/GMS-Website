<?php
//Good Gallery 1.0 by Cory "Cartossin" Salvesen
//For personal use only
//Commercial license may be available in the future
//Please leave my link at the bottom, it helps spread my script

//copyright Cory Salvesen 2008

//----------------------------------General Settings-----------------------------------------------------------

//The title for this gallery to be displayed in the browser's title bar
$customtitle = "2013 Gallery";

//How many thumbnails to display per page. (you may set a very large number to just display all thumbs on one page e.g. 9999)
$thumbsperpage = 72;

//Sorts the gallery alphabetically (if false, the gallery will be sorted by the filesystem default)
$sortalpha = false;

//Reverses the sort order of the pictures
$reversesort = false;

//if you edit the settings below this point on an existing gallery, you should delete /previewcache and /thumbcache
//-------------------------------------File Settings-----------------------------------------------------------

//Largest dimension allowed in preview images, anything larger will be resized. ie max height OR width
$maxdimension = 800;

//quality of preview images 0-100, 100 being largest filesize, but best quality)
$previewquality = 85;

//Largest dimension allowed in thumbnail images, anything larger will be resized. ie max height OR width
$maxthumbdimension = 100;

//quality of thumbnail images 0-100, 100 being largest filesize, but best quality)
$thumbquality = 95;

// Do not edit below this point unless you know what you're doing
//---------------------------------------------------------------------------------------------------------------------------

function lastimagevalue()
{
	global $filearray ;
	$i = 0;
	foreach($filearray as $currentfile){
		$i++;
	}
return $i;
}

function findtype($filename)
{
	return strtoupper(array_pop(explode(".", $filename)));
}

function htmltop()
{
	global $customtitle;
echo '<head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <meta name="description" content=""><meta name="author" content="">
      <title>' . $customtitle . '</title>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
      
      <link href="../../vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
      
      <link href="../../vendor/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
      <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css">
      <link href="https://fonts.googleapis.com/css?family=Kaushan+Script" rel="stylesheet" type="text/css">
      <link href="https://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic,700italic" rel="stylesheet" type="text/css">
      <link href="https://fonts.googleapis.com/css?family=Roboto+Slab:400,100,300,700" rel="stylesheet" type="text/css">
      
      <link href="../../css/agency.css" rel="stylesheet">
      <link href="../../css/custom-styling.min.css" rel="stylesheet">
      
      <link rel="icon" type="image/ico" href="/img/favicon16.ico" sizes="16x16">
      <link rel="icon" type="image/ico" href="/img/favicon32.ico" sizes="32x32">';

echo '</head>';

echo '<body onkeyup="unlockkeys(event)" onkeydown="keycheck(event)" onload="startjs()">';
echo '<div>';
}

function htmlbottom()
{
echo '<div id="bottomlink"><br/>Generated by <a href="http://lagbag.com/goodgallery">GoodGallery 1.0</a></div>';
echo '</div><br/><br/>';
echo '</body>';
echo '</html>';
}

function opendiv($divid)
{
echo '<div id="' . $divid . '">';
}

function closediv()
{
echo '</div>';
}

function findvaluebyfilename($filename) //finds image value by filename for use in permalinks returns 0 if file doesnt exist.
{
	global $filearray ;
	$i = 1;
	foreach($filearray as $currentfile)
	{
		if($currentfile == $filename)
			return $i;
		$i++;
	}
	return 0;
}

function fastdisplayimage()
{
	global $lastimagevalue;	
	global $filearray;
	global $thumbsperpage;

	echo '
	<script type="text/javascript">
		<!--
		var images = [];
		var previewimages = [];
		var thumbs = [];
		var thumbpage = [];
		var lastimagevalue;
		var lastpagevalue = 1;
		var monitortimerid;
		var hashmirror;
		var isMSIE;
		';
	echo "lastimagevalue = $lastimagevalue ;
	";

	for($i=1;$i<=($lastimagevalue);$i++)
	{
	echo "images[$i] = " . '"' . $filearray[$i-1] . '";
	';
	}
		
	$thumburl = $_SERVER["PHP_SELF"] . "?page=1";
	$selfurl = $_SERVER["PHP_SELF"] ;

	//large javascript/html block
	// this cool method lets me use ' and " and interpolated variables at the same time
	echo <<<END

	var inum = 1;
	var pnum = 1;
	var isfullres = 0;
	var keyslocked = 0;
	var waitingfor = 0;
	function unlockkeys(e)
	{
		keyslocked = 0;	
	}
	function keycheck(e)
	{
		if(keyslocked==0)
		{
			if(((e.which == 37)||(e.keyCode == 37))&&(isfullres==0))
				leftbutton();
			else if(((e.which == 39)||(e.keyCode == 39))&&(isfullres==0))
					rightbutton();
				 else if((e.which == 13) || (e.keyCode == 13))
						   togglefullres();
			keyslocked = 1;	
		}
	}

var fnWhenDone = function (oXML)
{
		waitingfor -= 1;
		realtime1 = document.getElementById("realtime");
		if(images[oXML.responseText] != null)
			realtime1.innerHTML = "Realtime monitor: " + images[oXML.responseText] + " added to gallery.<br/>Still waiting for " + waitingfor + " requests.";
		else
		{
			if(oXML.responseText == "")
				realtime1.innerHTML = "Realtime monitor: The server did not respond. GoodGallery will continue to try to contact the server.<br/>This message will go away once the connection is reestablished.";
			else
				realtime1.innerHTML = "Realtime monitor: Something went wrong. The server responded: " + oXML.responseText ;
		}
		currentpic = document.getElementById(oXML.responseText);
		if(currentpic != null)
			currentpic.src += "#";
		if(monitortimerid != null)
			clearTimeout(monitortimerid);
		monitortimerid = setTimeout("clearmonitor()", 5000);
};
function clearmonitor()
{
	if(waitingfor <= 0)
	{
		realtime1 = document.getElementById("realtime");
		realtime1.innerHTML = "" ;
		requestbuildall();
	}
}
function finalclearmonitor()
{
		realtime1 = document.getElementById("realtime");
		realtime1.innerHTML = "" ;
}
function requestbuildall()
{
		realtime1 = document.getElementById("realtime");
		realtime1.innerHTML = "Validating gallery, please wait...";
		var url = "buildall=1&nocache=" + Math.random() ;
		var xhr = new XHConn();
		xhr.connect("$selfurl", "GET", url, aftervalidate);
}
function aftervalidate(oXML)
{
	realtime1 = document.getElementById("realtime");
	realtime1.innerHTML = "";
	temp = oXML.responseText;
	temp += "";
	if(temp.indexOf("Allowed memory size") != -1)
	{
		temp = "GoodGallery fatal error: an image caused out of memory error.<br/><br/>";
		temp += "An image is probably too large to be built within the limits of your PHP configuration.<br/>";
		temp += "Your options are as follows:<br/><br/>";
		temp += "1. Increase your PHP memory_limit. Check out resource limits on <a href='http://php.net/ini.core'>http://php.net/ini.core</a><br/>";
		temp += "256M is usually a good value, but you can choose whatever you need.<br/>";
		temp += "If you don't have access to this, call your hosting provider.<br/><br/>";
		temp += "2. Remove images that are too large from the gallery.<br/><br/>";
		realtime1.innerHTML = temp;
	return 1;
	}
	if(oXML.responseText == "1")
	{
		realtime1.innerHTML = "Gallery is 100% built and validated.";
		if(monitortimerid != null)
			clearTimeout(monitortimerid);
		monitortimerid = setTimeout("finalclearmonitor()", 10000);
	}
	else
		requestbuildall();
}
/** XHConn - Simple XMLHTTP Interface - bfults@gmail.com - 2005-04-08        **
 ** Code licensed under Creative Commons Attribution-ShareAlike License      **
 ** http://creativecommons.org/licenses/by-sa/2.0/                           **/
function XHConn()
{
  var xmlhttp, bComplete = false;
  try { xmlhttp = new ActiveXObject("Msxml2.XMLHTTP"); }
  catch (e) { try { xmlhttp = new ActiveXObject("Microsoft.XMLHTTP"); }
  catch (e) { try { xmlhttp = new XMLHttpRequest(); }
  catch (e) { xmlhttp = false; }}}
  if (!xmlhttp) return null;
  this.connect = function(sURL, sMethod, sVars, fnDone)
  {
    if (!xmlhttp) return false;
    bComplete = false;
    sMethod = sMethod.toUpperCase();

    try {
      if (sMethod == "GET")
      {
        xmlhttp.open(sMethod, sURL+"?"+sVars, true);
        sVars = "";
      }
      else
      {
        xmlhttp.open(sMethod, sURL, true);
        xmlhttp.setRequestHeader("Method", "POST "+sURL+" HTTP/1.1");
        xmlhttp.setRequestHeader("Content-Type",
          "application/x-www-form-urlencoded");
      }
      xmlhttp.onreadystatechange = function(){
        if (xmlhttp.readyState == 4 && !bComplete)
        {
          bComplete = true;
          fnDone(xmlhttp);
        }};
      xmlhttp.send(sVars);
    }
    catch(z) { return false; }
    return true;
  };
  return this;
}

	function nextIndex(i)
	{
		if(i == lastimagevalue)
			return 1;
		else
			return i + 1;
	}
	function prevIndex(i)
	{
		if(i == 1)
			return lastimagevalue;
		else
			return i - 1;
	}

	function nextimage()
	{
		inum = nextIndex(inum);
		startimage();
	}
	function previousimage()
	{
		inum = prevIndex(inum);
		startimage();
	}
	function previouspage()
	{
	if(pnum <=1 )
		pnum = lastpagevalue;
	else
		pnum = pnum - 1;
	displaythumbs();
	}
	function nextpage()
	{
		if(pnum >= lastpagevalue)
			pnum = 1;
		else
			pnum = (pnum*1) + 1;
		displaythumbs();
	}
	function requestbuild(filenumber)
	{
		waitingfor += 1;
		realtime1 = document.getElementById("realtime");
		realtime1.innerHTML = "Realtime monitor: Adding new photos to gallery, please wait...<br/>Still waiting for " + waitingfor + " requests." ;
		filename = images[filenumber];
		var url = "build=" + escape(filename) + "&nocache=" + Math.random() + "&inum=" + filenumber;
		var xhr = new XHConn();
		xhr.connect("$selfurl", "GET", url, fnWhenDone);
	}
	
	function startjs()
	{
		isMSIE = ((navigator.appName == "Opera") || (navigator.appName == "Microsoft Internet Explorer" && parseFloat(navigator.appVersion) == 4));
		setInterval("watchhash()", 200);
		hashmirror = location.hash.slice(1);
		startwiththumbs = 1;
		for(i=1;i<=lastimagevalue;i++)
		{
			previewimages[i] = "previewcache/" + images[i] + ".resized.jpg";
			thumbs[i] = "thumbcache/" + images[i] + ".resized.jpg";
			if(unescape(location.hash.slice(1)) == images[i])
			{
				inum = i;
				startwiththumbs = 0;
			}
		}
		buildthumbpages();

		if(startwiththumbs == 1)
		{
			if(location.hash.slice(2) <= lastpagevalue && location.hash.slice(2) >=1)
				pnum = location.hash.slice(2);
			displaythumbs();
		}
		else
			startimage();
	}
	function watchhash()
	{
		if(isMSIE)
			return 1;
		if(unescape(location.hash.slice(1)) != unescape(hashmirror))
		{
			hashmirror = location.hash.slice(1);
			if(hashmirror.charAt(0) == ":" )
			{
				if(location.hash.slice(2) <= lastpagevalue && location.hash.slice(2) >=1)
					pnum = location.hash.slice(2);
				else
					pnum = 1;
				displaythumbs();
			}
			else
			{
				for(i=1;i<=lastimagevalue;i++)
				{
					if(unescape(location.hash.slice(1)) == images[i])
						inum = i;
				}
				startimage();
			}
		}
	}
	function startimage()
	{
		place = document.getElementById("thumbs") ;
		place.innerHTML = "";
		isfullres = 0;
		x = document.getElementById("photospot");
		y = document.getElementById("preimages");
		z = document.getElementById("counter");	

		hashmirror = escape(images[inum]);
		location.hash = hashmirror;

		pnum = Math.ceil(inum / $thumbsperpage);

		x.innerHTML = "<img src=" + escape(previewimages[inum]) + " onerror='requestbuild("+ inum +")'" + " id='" + inum + "' alt='["+ images[inum]+ "]'></img>";
		y.innerHTML = "<img src=" + escape(previewimages[nextIndex(inum)]) + "></img>";
		y.innerHTML += "<img src=" + escape(previewimages[prevIndex(inum)]) + "></img>";
		z.innerHTML = "Image " + inum + " of " + lastimagevalue;
		//z.innerHTML += images[inum];
	}
	function fullres()
	{
			x = document.getElementById("photospot");
			x.innerHTML = "<img src=" + escape(images[inum]) + "></img>";	
	}
	function togglefullres()
	{
		if(location.hash.slice(1).charAt(0) == ":")
			return true;
		if(isfullres == 0)
		{	
			isfullres = 1;
			fullres();
		}
		else
		{
			startimage();
		}
	}
	function preview(imageindex)
	{
		inum = imageindex ;
		startimage();
	}

	function buildthumbpages()
	{
		lastpagevalue = Math.ceil(lastimagevalue / $thumbsperpage);
		currentpage = 1;
		countonpage = 0;
		for(i=1;i<=lastimagevalue;i++)
		{
			if(countonpage == 0)
				thumbpage[currentpage] = "Page " + currentpage + " of " + lastpagevalue + "<br/>" + "<ul>";
			
			countonpage += 1;

			thumbpage[currentpage] += "<a href=#" + escape(images[i]) + " onclick='preview(" + i + ");return false;'" + ">";
			thumbpage[currentpage] += "<img src=" + escape(thumbs[i]) + " onerror='requestbuild(" + i + ")'" + " id='" + i + "' alt='[" + images[i] + "]'></img>";
			thumbpage[currentpage] += "</a>";

			if(countonpage == $thumbsperpage)
			{
				thumbpage[currentpage] += "</ul>";
				currentpage += 1;
				countonpage = 0;
			}
			else
				if(i == lastimagevalue)
				{
					thumbpage[currentpage] += "</ul>";
				}
		}
	}

	function leftbutton()
	{
		if(unescape(location.hash.slice(1)).charAt(0) == ":" )
			previouspage();
		else
			previousimage();
	}

	function rightbutton()
	{
		if(unescape(location.hash.slice(1)).charAt(0) == ":" )
			nextpage();
		else
			nextimage();
	}

	function displaythumbs()
	{
		hashmirror = ":" + pnum;
		location.hash = hashmirror;
		x = document.getElementById("photospot");
		y = document.getElementById("preimages");
		z = document.getElementById("counter");	
		x.innerHTML = "";
		y.innerHTML = "";
		z.innerHTML = "";

		place = document.getElementById("thumbs") ;
		place.innerHTML = thumbpage[pnum];
	}

	//-->
	</script>
	<div class="portfolio-modal" style="display:block">
		<div class="modal-content">
			<a href="/">
				<div class="close-modal">
            		<div class="lr">
            			<div class="rl">
            			</div>
            		</div>
        		</div>
        	</a>
			<div class="container">
				<div class="col-lg-12">
					<h2>2013 Gallery</h2>
					<br/><br/>
				</div>
				<div class="row row-centered">
					<div class="col-sm-3 col-centered">
						<button type="button" class="btn btn-primary" onmouseup="leftbutton()">Prev</button>
					</div>
					<div class="col-sm-3 col-centered">
						<a href="$selfurl#:" onclick="displaythumbs(pnum);return false;">
						<button type="button" class="btn btn-primary">Thumbnails</button>
						</a>
					</div>
					<div class="col-sm-3 col-centered">
						<button type="button" class="btn btn-primary" onmouseup="rightbutton()">Next</button>
					</div>
				</div>
				
				<br/>
					
				<div id="counter"></div>
				
				<div id="realtime"></div>

				<div id="thumbs"></div>

				<div id="preloader">
					<a id="preimages">Invisible Text</a>
				</div>
					
				<br/>
					
				<div class=row row-centered>
					<div class=col-lg-12 col-centered>
						<div id="photodiv">
							<a id="photospot" onclick="togglefullres()"></a>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

END;
	//end of large javascript/html block (this statement cannot be indented)

}
function closewindow()
{
	echo '
	<script>
		window.close();
	</script>
		Buildcache complete.<br/>
		This window should be closed now.<br/><br/><br/>
		';
}

function buildfilearray() //even better way to build array of files, easier to add types
{
	$i = -1;
	global $sortalpha;
	global $reversesort;
	global $cssexists ;
	$cssexists = false;
	$dir = opendir(".");
	while($currentfile = readdir($dir))
	{
		if($currentfile == "goodgallery.css")
			$cssexists = true;
		if(issupported($currentfile))
		{
			$i++;
			$filearray[$i] = $currentfile;
		}
	}
	closedir($dir);
	if($sortalpha)
		sort($filearray);
	if($reversesort)
		$filearray = array_reverse($filearray);
	return $filearray;
}

function issupported($filename)
{
	if(findtype($filename) == "JPG")
		return true;
	if(findtype($filename) == "JPEG")
		return true;
	if(findtype($filename) == "PNG")
		return true;
	if(findtype($filename) == "GIF")
		return true;
	return false;
}

function build($filename) //build echoing the responses
{
	if(!issupported($filename))
		die("exploit attempt detected, script killed");
	echo buildone($filename);
}

function buildall()
{
	global $filearray;
	shuffle($filearray); //makes more sense to do in a crazy order so if nasty php config is killing this early, it'll get all/most in several passes, then any holes will be filled in by on-demand XHR stuff
	foreach($filearray as $currentfile)
	{
		if(is_numeric(buildone($currentfile)))
		{
			echo $currentfile . " successfully built<br/>";
			ob_flush();
			flush();
		}
	}
	foreach(glob("thumbcache/*.tmp") as $currentfile)
		unlink($currentfile);
	foreach(glob("previewcache/*.tmp") as $currentfile)
		unlink($currentfile);
	
	foreach(glob("previewcache/*.*") as $currentfile) // scans for and deletes orphan cache files
	{
		if(!is_file(substr($currentfile, 13, strlen($currentfile) -25))) // strips path info and resized tag, then checks if original exists
			unlink($currentfile);
	}
	foreach(glob("thumbcache/*.*") as $currentfile) // scans for and deletes orphan cache files
	{
		if(!is_file(substr($currentfile, 11, strlen($currentfile) -23))) // strips path info and resized tag, then checks if original exists
			unlink($currentfile);
	}
	echo 1; // signifies it has reached the end.  if this is the lone output, the gallery is said to be validated
}

function buildone($filename) // build one file (thumb/preview) returns number of completed file or failure
{
		global $maxdimension;
		global $previewquality;
		global $thumbquality;
		global $maxthumbdimension;
		$filename = stripslashes(rawurldecode($filename));
		$previewname = 'previewcache/' . $filename . ".resized.jpg" ;
		$thumbname = 'thumbcache/' . $filename . ".resized.jpg" ;
		$whatgotdone = 0;  //1=preview 2=thumb 3=both 0=neither

	if(is_file($filename))
	{
		if(!is_file($previewname))
		{
					//Get proper new width/height for preview
			$dimensions = getimagesize($filename);
			$width = $dimensions[0];
			$height = $dimensions[1];
			if($width == 0)
			{
				@mkdir("ggRejectedfiles");
				if(is_file("ggRejectedfiles/" . $filename))
					@rename("ggRejectedfiles/" . $filename, "ggRejectedfiles/" . $filename . dupe);
				@rename(stripslashes($filename), "ggRejectedfiles/" . $filename);
				die($filename . " rejected due to not being able to get dimensions(likely corrupt file or extension is wrong.<br/>File moved to /ggRejectedfiles");
			}
			$ratio = $height / $width;
			$resized = false;
			$interlace = true;
			if(($height >= $width) && ($height > $maxdimension))
			{
				$height = $maxdimension;
				$resized = true;
				$width = ceil($maxdimension / $ratio);
			}
			else
			{
				if(($width > $height) && ($width > $maxdimension))
				{
					$width = $maxdimension;
					$resized = true;
					$height = ceil($maxdimension * $ratio);
				}
			}// at this point new dimensions are in $width and $height
			if(!is_dir("previewcache"))
				@mkdir("previewcache");
			rawbuild($filename, $previewname, $height, $width, $previewquality, $interlace);
			$whatgotdone += 1;
		}
		if(!is_file($thumbname))
		{
					//Get proper new width/height for thumb
			$dimensions = getimagesize($filename);
			$width = $dimensions[0];
			$height = $dimensions[1];
			$ratio = $height / $width;
			$resized = false;
			$interlace = false;
			
			$height = $maxthumbdimension;
			$resized = true;
			$width = ceil($maxthumbdimension / $ratio);
			
			if(!is_dir("thumbcache"))
				@mkdir("thumbcache");
			rawbuild($filename, $thumbname, $height, $width, $thumbquality, $interlace);
			$whatgotdone += 2;
		}
	}
	if($whatgotdone == 0)
		return "build of " . $filename . " failed.(already exists?)";
	else
		return (int)$_GET["inum"];

} // end buildone()

function rawbuild($filename, $newfilename, $height, $width, $quality, $interlace) //(new height/width)
{
	set_time_limit(30); //gives 30 seconds per image before script timeout (it is ok if the server overrides this)
	$dimensions = getimagesize($filename);
	if($dimensions[0] > $width)
	{
		$destimage = imagecreatetruecolor($width, $height);
		//logic for new types goes here (next line)
		if(findtype($filename) == "JPG" || findtype($filename) == "JPEG")
			imagecopyresampled($destimage, imagecreatefromjpeg($filename), 0, 0, 0, 0, $width, $height, $dimensions[0], $dimensions[1]);
		elseif(findtype($filename) == "PNG")
			imagecopyresampled($destimage, imagecreatefrompng($filename), 0, 0, 0, 0, $width, $height, $dimensions[0], $dimensions[1]);
		elseif(findtype($filename) == "GIF")
			imagecopyresampled($destimage, imagecreatefromgif($filename), 0, 0, 0, 0, $width, $height, $dimensions[0], $dimensions[1]);
	}
	else
	{
				//logic for new types goes here (next line)
		if(findtype($filename) == "JPG" || findtype($filename) == "JPEG")
			$destimage = imagecreatefromjpeg($filename);
		elseif(findtype($filename) == "PNG")
			$destimage = imagecreatefrompng($filename);
		elseif(findtype($filename) == "GIF")
			$destimage = imagecreatefromgif($filename);
	}
		if($interlace)
			imageinterlace($destimage, 1);
		imagejpeg($destimage, $newfilename . ".tmp", $quality);
		@rename($newfilename . ".tmp", $newfilename); // prevents half-written files if script is killed early
		imagedestroy($destimage);
		if(is_file($newfilename)) //check if actions worked (this is easier than having an error condition for each function)
			return true;
		else
		{
			@mkdir("ggRejectedfiles");
			if(is_file("ggRejectedfiles/" . $filename))
				@rename("ggRejectedfiles/" . $filename, "ggRejectedfiles/" . $filename . dupe);
			@rename(stripslashes($filename), "ggRejectedfiles/" . $filename);
			echo $filename . " was unbuildable and moved to /ggRejectedfiles";
			return false;
		}
}

//main program
if(!function_exists("ImageCreateTrueColor"))
{
	echo "GD 2.x image library not enabled.  This comes with php4 and php5, so it probably just needs to be enabled.<br/>See php.net or contact your hosting provider.<br/>";
	die("Fatal error: GD missing");
}

if(is_numeric($_GET["buildall"]))
{
	$filearray = buildfilearray();
	buildall();
}
else
	if(is_string($_GET["build"]))
		build($_GET["build"]);
	else
	{
		$filearray = buildfilearray();
	
		$lastimagevalue = lastimagevalue();
	
		htmltop();
		fastdisplayimage();
		htmlbottom();
	}
?>